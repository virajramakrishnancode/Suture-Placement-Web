[{"C:\\Users\\Startridge\\Desktop\\Suture Placement\\Suture-Placement-Web\\src\\App.js":"1","C:\\Users\\Startridge\\Desktop\\Suture Placement\\Suture-Placement-Web\\src\\index.js":"2","C:\\Users\\Startridge\\Desktop\\Suture Placement\\Suture-Placement-Web\\src\\reportWebVitals.js":"3"},{"size":21547,"mtime":1709018226014,"results":"4","hashOfConfig":"5"},{"size":552,"mtime":1702274887349,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1702274887350,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":1,"source":"11"},"1d6tc92",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Startridge\\Desktop\\Suture Placement\\Suture-Placement-Web\\src\\App.js",["18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57"],[],"import './App.css';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport active from './~autolabsuture/images/active.svg';\r\nimport done from './~autolabsuture/images/done.svg';\r\nimport inactive from './~autolabsuture/images/inactive.svg';\r\nimport upload from './~autolabsuture/images/upload.svg';\r\nimport angleIcon from './~autolabsuture/images/angle-icon.svg';\r\nimport { ThemeContext } from '@mui/styled-engine';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport useImage from 'use-image';\r\nimport Konva from 'konva';\r\nimport { render } from '@testing-library/react';\r\nimport logo from './~autolabsuture/images/logo.png';\r\nfunction App() {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [points, setPoints] = useState([]);\r\n  const scaleRef = useRef(null);\r\n  const traceRef = useRef(null); \r\n  const outputRef = useRef(null);  \r\n  const [savedPoints, setSavedPoints] = useState(null);\r\n  const [inputValues, setInputValues] = useState({\r\n    suture_width: '',\r\n    length: ''\r\n  })\r\n\r\n  const [tracePoints, setTracePoints] = useState([]);\r\n  const [savedTrace, setSavedTrace] = useState(null);\r\n\r\n  const [insertionPoints, setInsertionPoints] = useState([]);\r\n  const [centerPoints, setCenterPoints] = useState([]);\r\n  const [extractionPoints, setExtractionPoints] = useState([]);\r\n\r\n  const [activePanel, setActivePanel] = useState(\"uploadImage\") // uploadImage, locateWound, process, results\r\n  const [taskNumber, setTaskNumber] = useState(1) // The task currently being done. 1 or 2 right now.\r\n\r\n  const [savedImage, setSavedImage] = useState(null);\r\n\r\n  const recordedRectPos = useRef({x:0, y:0, w:0, h:0});\r\n\r\n  const point1 = useRef(null);\r\n  const point2 = useRef(null);\r\n\r\n  const finalPoints = useRef(null);\r\n\r\n  const activeImage = useRef(null);\r\n\r\n  const stageRef = useRef(null);\r\n  const layerRef = useRef(null);\r\n\r\n  const handleScaleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setInputValues((prevFormData) => ({\r\n      ...prevFormData,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n  };\r\n\r\n  const stepToOrder = {\r\n    uploadImage : 1, \r\n    locateWound : 2, \r\n    scaleSuture : 3, \r\n    process : 4, \r\n    results : 5\r\n  };\r\n\r\n  const orderToStep = {\r\n    1 : \"uploadImage\", \r\n    2 : \"locateWound\", \r\n    3 : \"scaleSuture\", \r\n    4 : \"process\", \r\n    5 : \"results\"\r\n  };\r\n\r\n  const stepToInfo = {\r\n    uploadImage : {\r\n      name : \"Upload Image\",\r\n      desc : \"Upload an image of a wound. Make sure the whole wound is visible.\",\r\n      body : (<><img id=\"task1\" width=\"24px\" src={active} alt=\"\" /> <strong>Upload</strong> an image of a wound.</>)\r\n    }, \r\n    locateWound : {\r\n      name : \"Locate Wound\",\r\n      desc : \"Help us find the wound you plan to suture.\",\r\n      body : (<><img id=\"task1\" width=\"24px\" src={active} alt=\"\" /> <strong>Select</strong> a rectangle around the target wound.<br/>\r\n      <img id=\"task2\" width=\"24px\" src={inactive} alt=\"\" /> <strong>Confirm</strong> your selection.<br/>\r\n      <button class=\"confirmButton\" onClick={composeStateSet(\"scaleSuture\")}><strong>Confirm</strong></button></>) // onclick goes here\r\n    }, \r\n    scaleSuture : {\r\n      name : \"Scale Suture\",\r\n      desc : \"Show us how long an example suture should be.\",\r\n      body : (<><img id=\"task1\" width=\"24px\" src={active} alt=\"\" /> <strong>Click</strong> a spot you might start a suture.<br/>\r\n      <img id=\"task2\" width=\"24px\" src={inactive} alt=\"\" /> <strong>Click</strong> a spot you might end that suture.<br/>\r\n      <img id=\"task3\" width=\"24px\" src={inactive} alt=\"\" /> <strong>Confirm</strong> your chosen reference locations.<br/>\r\n      <button class=\"confirmButton\" onClick={composeStateSet(\"process\")}><strong>Confirm</strong></button><br/>\r\n      <button class=\"resetButton\" onClick={resetSuturePointLocations}><strong>Reset Points</strong></button></>) // reset points goes here\r\n    },\r\n    process : {\r\n      name : \"Processing\",\r\n      desc : \"We're processing your image. Give us a moment.\",\r\n      body : (<><img id=\"task1\" width=\"24px\" src={active} alt=\"\" /> <strong>Wait</strong> while we find a good suture plan.</>)\r\n    }, \r\n    results : {\r\n      name : \"Results\",\r\n      desc : \"All done! You can view the suture plan on the right.\",\r\n      body : (<><h3><img width=\"24px\" src={angleIcon} alt=\"\" onClick={handleExport}/> Save as .jpg</h3><br/>\r\n      <h3><img width=\"24px\" src={angleIcon} alt=\"\" /> Restart</h3><br/>\r\n      <h3><img width=\"24px\" src={angleIcon} alt=\"\" /> Give Feedback</h3><br/></>)\r\n    }\r\n  };\r\n\r\n  function sidebarContentsFor(panel) {\r\n    return (<><h1>\r\n      {stepToInfo[panel].name}\r\n      {panel != \"uploadImage\" ? <button class=\"backButton\" onClick={goBack(panel)}>\r\n        Step Back\r\n      </button> : null}\r\n    </h1>\r\n    \r\n    <div className=\"helperText\" style={{marginBottom:\"49px\"}}>\r\n      {stepToInfo[panel].desc}\r\n    </div>\r\n    <div id=\"taskText\" className=\"taskText\">\r\n      {stepToInfo[panel].body}\r\n    </div>\r\n    <div className=\"bottomArea\">\r\n      <div className=\"bottomAreaContent\" style={{marginLeft:\"11px\", marginTop:\"4px\"}}>\r\n        <div className=\"vertical\" style={{left:\"22px\", top:\"16px\", zIndex:\"-1\"}}></div>\r\n        <h2 id=\"majorTask1\"><img width=\"24px\"  src={{1 : active,   2 : done,     3: done,      4: done,        5: done}[stepToOrder[panel]]} alt=\"\" /> Upload Image</h2><br/>\r\n        <h2 id=\"majorTask2\"><img width=\"24px\"  src={{1 : inactive, 2 : active,   3: done,      4: done,        5: done}[stepToOrder[panel]]} alt=\"\" /> Locate Wound</h2><br/>\r\n        <h2 id=\"majorTask3\"><img width=\"24px\"  src={{1 : inactive, 2 : inactive, 3: active,    4: done,        5: done}[stepToOrder[panel]]} alt=\"\" /> Scale Suture</h2><br/>\r\n        <h2 id=\"majorTask4\"><img width=\"24px\"  src={{1 : inactive, 2 : inactive, 3: inactive,  4: active,      5: done}[stepToOrder[panel]]} alt=\"\" /> Process</h2><br/>\r\n        <h2 id=\"majorTask5\"><img width=\"24px\"  src={{1 : inactive, 2 : inactive, 3: inactive,  4: inactive,    5: done}[stepToOrder[panel]]} alt=\"\" /> Results</h2><br/>\r\n      </div>\r\n    </div></>)\r\n  };\r\n\r\n  var imageDisplayWidth = 1385\r\n  var imageDisplayHeight = 1080\r\n\r\n  function resetSuturePointLocations() {\r\n    if (point1.current != null) {\r\n      point1.current.destroy();\r\n      point1.current = null;\r\n    }\r\n    if (point2.current != null) {\r\n      point2.current.destroy();\r\n      point2.current = null;\r\n    }\r\n  }\r\n\r\n  function mainAreaContentsFor(panel) {\r\n    return {\r\n      \"uploadImage\":\r\n        (<div className=\"uploadImagePanel\" id=\"uploadImagePanel\"> \r\n          <label for=\"imgUpload\"><img width=\"24px\" src={upload} alt=\"\" />Upload Image</label>      \r\n          <input id=\"imgUpload\" type=\"file\" accept=\"image/*\" style={{zIndex:\"10\"}} onChange={handleImageUpload} />\r\n        </div>),\r\n      \"locateWound\":\r\n        (<div className=\"locateWoundPanel\" id=\"locateWoundPanel\"> \r\n        </div>),\r\n      \"scaleSuture\":\r\n        (<div className=\"scaleSuturePanel\" id=\"scaleSuturePanel\"> \r\n        </div>),\r\n      \"process\":\r\n        (<div className=\"processPanel\" id=\"processPanel\"> \r\n        </div>),\r\n      \"results\":\r\n        (<div className=\"resultsPanel\" id=\"resultsPanel\"> \r\n        </div>),\r\n    }[panel]\r\n  };\r\n\r\n  // The start and end coordinates of the rectangle, in pixels\r\n  // Adds a few pixels extra just in case of scaling weirdness which can happen sometimes\r\n  // TODO: Prevent OOB returns (like under 0 or above img size)\r\n  const extrapolateRectPos = (imagePos, rectPos, rectSize, imageScale) => {\r\n    var rectOffset = {x: rectPos.x - imagePos.x, y: rectPos.y - imagePos.y} // Difference between rect's pos and image's pos.\r\n    var scaledOffset = {x: rectOffset.x / imageScale.x, y: rectOffset.y / imageScale.y} // Rect's position on actual image.\r\n    var scaledRectSize = {x: rectSize.width / imageScale.x, y: rectSize.height / imageScale.y}\r\n    return {x: scaledOffset.x, y: scaledOffset.y, w: scaledRectSize.x, h: scaledRectSize.y}\r\n  }\r\n\r\n  // TODO This needs to change based on image scale.\r\n  const extrapolateSutureLength = () => {\r\n    let xDiff = point1.current.x() - point2.current.x();\r\n    let yDiff = point1.current.y() - point2.current.y();\r\n    return Math.hypot(xDiff, yDiff);\r\n  }\r\n\r\n  function wipeLayer() {\r\n    layerRef.current.destroyChildren();\r\n  }\r\n\r\n  function renderLineBetween(x1, y1, x2, y2, color, isDashed) {\r\n    let newLine = new Konva.Line({\r\n      points: [x1 + 50, y1 + 50, x2 + 50, y2 + 50],\r\n      strokeWidth: 2,\r\n      stroke: color,\r\n      dash: (isDashed ? [1, 1, 0] : null)\r\n    })\r\n    layerRef.current.add(newLine)\r\n    stageRef.current.draw()\r\n  }\r\n\r\n  // TODO make points move and scale with the overall image\r\n  function renderPointAt(x, y, color) {\r\n    let newPoint = new Konva.Circle({\r\n      x: x,\r\n      y: y,\r\n      radius: 5,\r\n      fill: color\r\n    })\r\n    layerRef.current.add(newPoint)\r\n    stageRef.current.draw()\r\n    return newPoint;\r\n  }\r\n\r\n  async function fetchPoints() {\r\n    finalPoints.current = await getResultPointsFor(recordedRectPos.current, extrapolateSutureLength(), savedImage.name);\r\n  }\r\n\r\n  function showFinalResult() {\r\n    wipeLayer();\r\n\r\n    var URL = window.webkitURL || window.URL;\r\n    var url = URL.createObjectURL(savedImage);\r\n    setSavedImage(savedImage)\r\n    var img = new Image();\r\n    // edit this stuff\r\n    img.onload = async function() {\r\n      console.log(\"Image has loaded.\")\r\n      var width = img.width;\r\n      var height = img.height;\r\n\r\n      // now load the Konva image\r\n      activeImage.current = new Konva.Image({\r\n        draggable: false,\r\n        width: width,\r\n        height: height,\r\n        image: img,\r\n        x: 50,\r\n        y: 50\r\n      });\r\n\r\n      var centerPoints = finalPoints.current[1]\r\n      var insertPoints = finalPoints.current[0]\r\n      var extractPoints = finalPoints.current[2]\r\n\r\n      console.log(\"Points are:\", centerPoints, insertPoints, extractPoints)\r\n      \r\n      for (const point of insertPoints) {\r\n        renderPointAt(point[1] + 50, point[0] + 50, 'green') // TODO remove these 50s for the real offset\r\n      }\r\n      for (const point of extractPoints) {\r\n        renderPointAt(point[1] + 50, point[0] + 50, 'red')\r\n      }\r\n      /*for (const point of centerPoints) {\r\n        renderPointAt(point[1] + 50, point[0] + 50, 'blue')\r\n      }*/\r\n      // Draw lines\r\n      for (let i = 0; i < insertPoints.length; i++) {\r\n        renderLineBetween(insertPoints[i][1], insertPoints[i][0], extractPoints[i][1], extractPoints[i][0], 'green', true)\r\n        if (i + 1 < insertPoints.length) {\r\n          renderLineBetween(extractPoints[i][1], extractPoints[i][0], insertPoints[i + 1][1], insertPoints[i + 1][0], 'red', false)\r\n        }\r\n      }\r\n\r\n      layerRef.current.add(activeImage.current)\r\n      activeImage.current.zIndex(0)\r\n      stageRef.current.draw()\r\n    }\r\n    img.src = url;\r\n  }\r\n\r\n  async function getResultPointsFor(rectData, sutureLength, imgPath) {\r\n    const requestData = {\r\n      rectData: rectData,\r\n      sutureLength: sutureLength,\r\n      imgPath: imgPath\r\n    };\r\n    const response = await fetch('https://autolabsuture.apphost.ocf.berkeley.edu/get_suture_placement', {\r\n      mode: 'cors',\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(requestData)\r\n    });\r\n    console.log('Response:', response);\r\n    const data = await response.json();\r\n    console.log('Response Data:', data);\r\n    return data\r\n  }\r\n\r\n  function addClickableArea() {  \r\n    wipeLayer()\r\n\r\n    var URL = window.webkitURL || window.URL;\r\n    var url = URL.createObjectURL(savedImage);\r\n    setSavedImage(savedImage)\r\n    var img = new Image();\r\n    // edit this stuff\r\n    img.onload = function() {\r\n      var width = img.width;\r\n      var height = img.height;\r\n\r\n      // now load the Konva image\r\n      activeImage.current = new Konva.Image({\r\n        draggable: true,\r\n        width: width,\r\n        height: height,\r\n        image: img,\r\n        x: 50,\r\n        y: 50\r\n      });\r\n      activeImage.current.on(\"click\", (e) =>{\r\n      \r\n        if (point1.current == null) {\r\n          point1.current = {x: e.evt.layerX, y: e.evt.layerY}\r\n          console.log(\"Scaling Point 1 @ \", e.evt.layerX, e.evt.layerY)\r\n          point1.current = renderPointAt(e.evt.layerX, e.evt.layerY, 'red')\r\n        } else if (point2.current == null)  {\r\n          point2.current = {x: e.evt.layerX, y: e.evt.layerY}\r\n          console.log(\"Scaling Point 2 @ \", e.evt.layerX, e.evt.layerY)\r\n          point2.current = renderPointAt(e.evt.layerX, e.evt.layerY, 'red')\r\n        }\r\n      });\r\n      layerRef.current.add(activeImage.current)\r\n      activeImage.current.zIndex(1)\r\n      stageRef.current.draw()\r\n    }\r\n    img.src = url;\r\n  }\r\n\r\n  const addSizingRect = () => {\r\n    var handle = new Konva.Circle({\r\n      draggable: true,\r\n      radius: 20,\r\n      fill: '#4100A3',\r\n      opacity: 0.8,\r\n      stroke: 'black',\r\n      strokeWidth: 2,\r\n    })\r\n    let sizingRect = new Konva.Rect({\r\n      draggable: true,\r\n      fill: '#4100A3',\r\n      opacity: 0.2,\r\n      stroke: 'black',\r\n      strokeWidth: 2,\r\n      width: 400,\r\n      height: 400\r\n    });\r\n\r\n    var scaleIcon;\r\n    var imageObj = new Image();\r\n    imageObj.onload = function() {\r\n      scaleIcon = new Konva.Image({\r\n        image: imageObj,\r\n        width: 22,\r\n        height: 22,\r\n        listening: false\r\n      });\r\n\r\n      console.log(imageObj)\r\n      layerRef.current.add(scaleIcon);\r\n      enforceHandlePos()\r\n      console.log(stageRef)\r\n      stageRef.current.draw();  \r\n    }\r\n    imageObj.src = require('./~autolabsuture/images/scale.png');\r\n\r\n    // Updates position of handle and its icon.\r\n    // There's probably some kind of grouping / container stuff that we can do to update the icon's position automatically.\r\n    const enforceHandlePos = () => {\r\n      handle.x(sizingRect.x() + sizingRect.width());\r\n      handle.y(sizingRect.y() + sizingRect.height());\r\n      if (imageObj.complete && scaleIcon) {\r\n        scaleIcon.x(sizingRect.x() + sizingRect.width() - 10);\r\n        scaleIcon.y(sizingRect.y() + sizingRect.height() - 10);\r\n      }\r\n    };\r\n\r\n    sizingRect.on('dragmove', (e) => {\r\n      enforceHandlePos();\r\n    });\r\n\r\n    handle.on('dragmove', (e) => {\r\n      // Resize rect\r\n      var minWidth = 50;\r\n      var minHeight = 50;\r\n      var targetWidth = handle.x() - sizingRect.x();\r\n      var targetHeight = handle.y() - sizingRect.y();\r\n      sizingRect.width(Math.max(minWidth, targetWidth));\r\n      sizingRect.height(Math.max(minHeight, targetHeight));\r\n\r\n      // Enforce handle position\r\n      enforceHandlePos();\r\n    });\r\n\r\n    // Light up on hover.\r\n    sizingRect.on('mouseover', () => {\r\n      sizingRect.fill(\"#8433ff\");\r\n    });\r\n    sizingRect.on('mouseout', (e) => {\r\n      sizingRect.fill(\"#4100A3\");\r\n      recordedRectPos.current = extrapolateRectPos(activeImage.current.position(), sizingRect.position(), sizingRect.size(), activeImage.current.scale());\r\n    });\r\n    handle.on('mouseover', () => {\r\n      handle.fill(\"#8433ff\");\r\n    });\r\n    handle.on('mouseout', () => {\r\n      handle.fill(\"#4100A3\");\r\n      recordedRectPos.current = extrapolateRectPos(activeImage.current.position(), sizingRect.position(), sizingRect.size(), activeImage.current.scale());\r\n    });\r\n\r\n    layerRef.current.add(sizingRect);\r\n    layerRef.current.add(handle);\r\n\r\n    enforceHandlePos();\r\n\r\n    stageRef.current.draw();\r\n  }\r\n\r\n  const handleImageUpload = (event) => {\r\n    var URL = window.webkitURL || window.URL;\r\n    var url = URL.createObjectURL(event.target.files[0]);\r\n    setSavedImage(event.target.files[0])\r\n    var img = new Image();\r\n    img.src = url;\r\n\r\n    // edit this stuff\r\n    img.onload = function() {\r\n      var width = img.width;\r\n      var height = img.height;\r\n\r\n      // now load the Konva image\r\n      activeImage.current = new Konva.Image({\r\n        draggable: true,\r\n        width: width,\r\n        height: height,\r\n        image: img,\r\n        x: 50,\r\n        y: 50\r\n      });\r\n\r\n      const enforceVisibility = () => {\r\n        var minVisible = 400 // Minimum visible pix in each direction.\r\n        activeImage.current.y(Math.max(activeImage.current.y(), activeImage.current.height() * activeImage.current.scale().y * -1 + minVisible))\r\n        activeImage.current.x(Math.max(activeImage.current.x(), activeImage.current.width() *  activeImage.current.scale().x * -1 + minVisible))\r\n\r\n        activeImage.current.y(Math.min(activeImage.current.y(), imageDisplayHeight - minVisible))\r\n        activeImage.current.x(Math.min(activeImage.current.x(), imageDisplayWidth - minVisible))\r\n      }\r\n\r\n      activeImage.current.on('dragmove', () => {\r\n        enforceVisibility();\r\n      });\r\n      activeImage.current.on('wheel', (e) => {\r\n        // Rescale.\r\n        var currentScale = activeImage.current.scale();\r\n\r\n        var minScale = 0.5;\r\n        var maxScale = 2.5;\r\n        var changeRate = -0.0005\r\n        var change = e.evt.deltaY * changeRate;\r\n\r\n        var targetScale = Math.min(Math.max(currentScale.x + change, minScale), maxScale);\r\n        if (targetScale == currentScale.x) {\r\n          return;\r\n        }\r\n\r\n        activeImage.current.scale({x: targetScale, y: targetScale});\r\n        \r\n        // Change position so it scales from center.\r\n        var diffX = change * -0.5 * activeImage.current.width();\r\n        var diffY = change * -0.5 * activeImage.current.height();\r\n        activeImage.current.x(activeImage.current.x() + diffX);\r\n        activeImage.current.y(activeImage.current.y() + diffY);\r\n\r\n        enforceVisibility();\r\n      })\r\n\r\n      layerRef.current.add(activeImage.current);\r\n      stageRef.current.draw();\r\n\r\n      addSizingRect();\r\n\r\n      changePanel(\"locateWound\");\r\n    }\r\n  };\r\n\r\n  function goBack(fromState) {\r\n    console.log(\"test\")\r\n    let currentIndex = stepToOrder[fromState]\r\n    let prevState = orderToStep[currentIndex - 1]\r\n    // Override to not go to \"processing\" window\r\n    prevState = prevState == \"process\" ? \"scaleSuture\" : prevState\r\n    return function() {\r\n      wipeLayer()\r\n      changePanel(prevState)\r\n    }\r\n  }\r\n\r\n  // Add any specific panel switch logic here.\r\n  async function changePanel(toState) {\r\n    if (toState == \"uploadImage\") {\r\n      setActivePanel(\"uploadImage\")\r\n    }\r\n    if (toState == \"locateWound\") {\r\n      setActivePanel(\"locateWound\")\r\n    }\r\n    if (toState == \"scaleSuture\") {\r\n      setActivePanel(\"scaleSuture\")\r\n      resetSuturePointLocations()\r\n      addClickableArea()\r\n    }\r\n    if (toState == \"process\" && point1.current != null && point2.current != null) {\r\n      setActivePanel(\"process\")\r\n      await fetchPoints()\r\n      changePanel(\"results\")\r\n    }\r\n    if (toState == \"results\") {\r\n      setActivePanel(\"results\")\r\n      showFinalResult()\r\n      console.log(\"Showing final results.\")\r\n    }\r\n  }\r\n\r\n  // PICKUP POINT: Move this into the above function so we can call showFinalResult when updating the active panel\r\n  function composeStateSet(toState) {\r\n    return async function() {\r\n      await changePanel(toState)\r\n    }\r\n  }\r\n\r\n  // function from https://stackoverflow.com/a/15832662/512042\r\n  function downloadURI(uri, name) {\r\n    var link = document.createElement('a');\r\n    link.download = name;\r\n    link.href = uri;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  }\r\n\r\n  // function from https://konvajs.org/docs/react/Canvas_Export.html\r\n  function handleExport() {\r\n    console.log(stageRef.current)\r\n    const uri = stageRef.current.toDataURL();\r\n    console.log(uri);\r\n    downloadURI(uri, 'stage.png');\r\n  };\r\n\r\n  const [showCover, setShowCover] = useState(true);\r\n  function prepareStage() {\r\n    console.log(\"Page has loaded.\")\r\n\r\n    var newStage = new Konva.Stage({\r\n      container: 'mainCanvas',\r\n      width: imageDisplayWidth,\r\n      height: imageDisplayHeight\r\n    });\r\n    var newLayer = new Konva.Layer();\r\n\r\n    stageRef.current = newStage\r\n    stageRef.current.add(newLayer);\r\n    layerRef.current = newLayer;\r\n\r\n    setShowCover(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { showCover ? <div style={{paddingTop:\"40px\", textAlign:\"center\"}} className=\"cover_panel\">\r\n        <text className=\"rainbow_text\">Extending Automated Suture Placing to 3D</text>\r\n        <br/>\r\n        <h4 style={{paddingTop:\"40px\", paddingBottom:\"40px\",fontSize:\"30px\"}}>Viraj Ramakrishnan, Harshika Jalan, Miller Hollinger, Harsha Polavaram, Julia Isaac, Hansoul Kim, Aviv Adler, Professor Ken Goldberg </h4>\r\n        <br/>\r\n        <button className=\"beginButton\" onClick={prepareStage}>Begin</button>\r\n        <br/>\r\n        <a href=\"https://autolab.berkeley.edu/\" target=\"_blank\"><img style={{position: \"fixed\", bottom:\"0px\", left:\"0px\"}} src={logo}></img></a>\r\n        <a href=\"https://www.ocf.berkeley.edu\">\r\n        <img src=\"http://www.ocf.berkeley.edu/hosting-logos/ocf-hosted-penguin.svg\"\r\n          alt=\"Hosted by the OCF\" style={{position: \"fixed\", bottom:\"0px\", right:\"0px\", border: \"0\"}} />\r\n        </a>\r\n      </div> : null }\r\n      <div className=\"body\" style={{ width : '1920px', height:'1080px'}}>\r\n        <div className=\"sideinfo\">\r\n          {sidebarContentsFor(activePanel)}\r\n        </div>\r\n\r\n        <div className=\"main\">\r\n          {mainAreaContentsFor(activePanel)}\r\n        </div>\r\n\r\n        <div id=\"mainCanvas\" style={{position:\"absolute\", left:\"535px\"}}>\r\n        </div>\r\n\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Startridge\\Desktop\\Suture Placement\\Suture-Placement-Web\\src\\index.js",[],[],"C:\\Users\\Startridge\\Desktop\\Suture Placement\\Suture-Placement-Web\\src\\reportWebVitals.js",[],[],{"ruleId":"58","severity":1,"message":"59","line":2,"column":35,"nodeType":"60","messageId":"61","endLine":2,"endColumn":44},{"ruleId":"58","severity":1,"message":"62","line":8,"column":10,"nodeType":"60","messageId":"61","endLine":8,"endColumn":22},{"ruleId":"58","severity":1,"message":"63","line":9,"column":10,"nodeType":"60","messageId":"61","endLine":9,"endColumn":15},{"ruleId":"58","severity":1,"message":"64","line":9,"column":17,"nodeType":"60","messageId":"61","endLine":9,"endColumn":22},{"ruleId":"58","severity":1,"message":"65","line":10,"column":8,"nodeType":"60","messageId":"61","endLine":10,"endColumn":16},{"ruleId":"58","severity":1,"message":"66","line":12,"column":10,"nodeType":"60","messageId":"61","endLine":12,"endColumn":16},{"ruleId":"58","severity":1,"message":"67","line":15,"column":10,"nodeType":"60","messageId":"61","endLine":15,"endColumn":23},{"ruleId":"58","severity":1,"message":"68","line":15,"column":25,"nodeType":"60","messageId":"61","endLine":15,"endColumn":41},{"ruleId":"58","severity":1,"message":"69","line":16,"column":10,"nodeType":"60","messageId":"61","endLine":16,"endColumn":16},{"ruleId":"58","severity":1,"message":"70","line":16,"column":18,"nodeType":"60","messageId":"61","endLine":16,"endColumn":27},{"ruleId":"58","severity":1,"message":"71","line":17,"column":9,"nodeType":"60","messageId":"61","endLine":17,"endColumn":17},{"ruleId":"58","severity":1,"message":"72","line":18,"column":9,"nodeType":"60","messageId":"61","endLine":18,"endColumn":17},{"ruleId":"58","severity":1,"message":"73","line":19,"column":9,"nodeType":"60","messageId":"61","endLine":19,"endColumn":18},{"ruleId":"58","severity":1,"message":"74","line":20,"column":10,"nodeType":"60","messageId":"61","endLine":20,"endColumn":21},{"ruleId":"58","severity":1,"message":"75","line":20,"column":23,"nodeType":"60","messageId":"61","endLine":20,"endColumn":37},{"ruleId":"58","severity":1,"message":"76","line":21,"column":10,"nodeType":"60","messageId":"61","endLine":21,"endColumn":21},{"ruleId":"58","severity":1,"message":"77","line":26,"column":10,"nodeType":"60","messageId":"61","endLine":26,"endColumn":21},{"ruleId":"58","severity":1,"message":"78","line":26,"column":23,"nodeType":"60","messageId":"61","endLine":26,"endColumn":37},{"ruleId":"58","severity":1,"message":"79","line":27,"column":10,"nodeType":"60","messageId":"61","endLine":27,"endColumn":20},{"ruleId":"58","severity":1,"message":"80","line":27,"column":22,"nodeType":"60","messageId":"61","endLine":27,"endColumn":35},{"ruleId":"58","severity":1,"message":"81","line":29,"column":10,"nodeType":"60","messageId":"61","endLine":29,"endColumn":25},{"ruleId":"58","severity":1,"message":"82","line":29,"column":27,"nodeType":"60","messageId":"61","endLine":29,"endColumn":45},{"ruleId":"58","severity":1,"message":"83","line":30,"column":10,"nodeType":"60","messageId":"61","endLine":30,"endColumn":22},{"ruleId":"58","severity":1,"message":"84","line":30,"column":24,"nodeType":"60","messageId":"61","endLine":30,"endColumn":39},{"ruleId":"58","severity":1,"message":"85","line":31,"column":10,"nodeType":"60","messageId":"61","endLine":31,"endColumn":26},{"ruleId":"58","severity":1,"message":"86","line":31,"column":28,"nodeType":"60","messageId":"61","endLine":31,"endColumn":47},{"ruleId":"58","severity":1,"message":"87","line":34,"column":10,"nodeType":"60","messageId":"61","endLine":34,"endColumn":20},{"ruleId":"58","severity":1,"message":"88","line":34,"column":22,"nodeType":"60","messageId":"61","endLine":34,"endColumn":35},{"ruleId":"58","severity":1,"message":"89","line":50,"column":9,"nodeType":"60","messageId":"61","endLine":50,"endColumn":31},{"ruleId":"58","severity":1,"message":"90","line":58,"column":9,"nodeType":"60","messageId":"61","endLine":58,"endColumn":25},{"ruleId":"91","severity":1,"message":"92","line":118,"column":14,"nodeType":"93","messageId":"94","endLine":118,"endColumn":16},{"ruleId":"91","severity":1,"message":"95","line":472,"column":25,"nodeType":"93","messageId":"94","endLine":472,"endColumn":27},{"ruleId":"91","severity":1,"message":"95","line":501,"column":27,"nodeType":"93","messageId":"94","endLine":501,"endColumn":29},{"ruleId":"91","severity":1,"message":"95","line":510,"column":17,"nodeType":"93","messageId":"94","endLine":510,"endColumn":19},{"ruleId":"91","severity":1,"message":"95","line":513,"column":17,"nodeType":"93","messageId":"94","endLine":513,"endColumn":19},{"ruleId":"91","severity":1,"message":"95","line":516,"column":17,"nodeType":"93","messageId":"94","endLine":516,"endColumn":19},{"ruleId":"91","severity":1,"message":"95","line":521,"column":17,"nodeType":"93","messageId":"94","endLine":521,"endColumn":19},{"ruleId":"91","severity":1,"message":"95","line":526,"column":17,"nodeType":"93","messageId":"94","endLine":526,"endColumn":19},{"ruleId":"96","severity":1,"message":"97","line":585,"column":9,"nodeType":"98","messageId":"99","endLine":585,"endColumn":65,"fix":"100"},{"ruleId":"101","severity":1,"message":"102","line":585,"column":65,"nodeType":"98","endLine":585,"endColumn":135},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ThemeContext' is defined but never used.","'Stage' is defined but never used.","'Layer' is defined but never used.","'useImage' is defined but never used.","'render' is defined but never used.","'selectedImage' is assigned a value but never used.","'setSelectedImage' is assigned a value but never used.","'points' is assigned a value but never used.","'setPoints' is assigned a value but never used.","'scaleRef' is assigned a value but never used.","'traceRef' is assigned a value but never used.","'outputRef' is assigned a value but never used.","'savedPoints' is assigned a value but never used.","'setSavedPoints' is assigned a value but never used.","'inputValues' is assigned a value but never used.","'tracePoints' is assigned a value but never used.","'setTracePoints' is assigned a value but never used.","'savedTrace' is assigned a value but never used.","'setSavedTrace' is assigned a value but never used.","'insertionPoints' is assigned a value but never used.","'setInsertionPoints' is assigned a value but never used.","'centerPoints' is assigned a value but never used.","'setCenterPoints' is assigned a value but never used.","'extractionPoints' is assigned a value but never used.","'setExtractionPoints' is assigned a value but never used.","'taskNumber' is assigned a value but never used.","'setTaskNumber' is assigned a value but never used.","'handleScaleInputChange' is assigned a value but never used.","'handleFormSubmit' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"103","text":"104"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",[20769,20769]," rel=\"noreferrer\""]